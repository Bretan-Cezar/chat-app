//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "private_user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i64,
    pub name: String,
    #[sea_orm(column_type = "Text")]
    pub password: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::private_message::Entity")]
    PrivateMessage,
    #[sea_orm(has_many = "super::private_room_user_distro::Entity")]
    PrivateRoomUserDistro,
}

impl Related<super::private_message::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PrivateMessage.def()
    }
}

impl Related<super::private_room_user_distro::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PrivateRoomUserDistro.def()
    }
}

impl Related<super::private_room::Entity> for Entity {
    fn to() -> RelationDef {
        super::private_room_user_distro::Relation::PrivateRoom.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::private_room_user_distro::Relation::PrivateUser
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
